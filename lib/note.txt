libevet模块与设计步骤：

一、数据结构模块：
首先是基础工作，构建libevnet用来存放主体结构event所需要的容器模型：
1、普通event采用tail queue；
2、超时event采用min heap；
3、struct相关设计，如event结构体（需要在整个实现过程中逐步完善、所以会在纵向时间上进行）。

二、以event为中心的三种事件类型：signal、io、timeout：
这里需要理一下思路，io需要封装处理multiplexing相关模块，而在这些实现中超时是不可或缺的因素，所以io和timeout融合的比较自然；而signal事件的发生是完全异步的，无法预知，libevent采用类似pipe的方式把系统信号巧妙转换为io事件。所以针对这三种事件有以下工作：
1、signal方面需要创建本地socket对作为signal-io转换的桥梁。
2、io方面稍微复杂一些，因为存在几种不同平台下的复用技术，如果考虑平台移植的话，工作量会大一些。
3、至于超时事件，因为和io模块联系紧密，所以没有明显的模块化，需要在主循环中做具体控制。但是有一些时间校正相关的函数需要构建。

三、主循环模块
前面都只是基础工作，为主循环逻辑做铺垫。最后要贯通各模块，包括事件的注册、资源分配与数据存储、事件的调度、提供可使用的接口等。
